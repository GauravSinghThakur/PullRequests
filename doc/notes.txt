# Times between opening and closing a pull request, per pull request

select a.pull_request_id, a.created_at, b.created_at from pull_request_history a, pull_request_history b where a.pull_request_id = b.pull_request_id and a.action='opened' and b.action='merged' group by a.pull_request_id;

# Hours before a pull request has been merged 

select a.pull_request_id, timediff(b.created_at, a.created_at) from pull_request_history a, pull_request_history b where a.pull_request_id = b.pull_request_id and a.action='opened' and b.action='merged' group by a.pull_request_id;

# Pull request lifetime descriptive statistics per owner/project

select p.id, p.name, 
  count(pr.id) as count,
  min(timestampdiff(minute, b.created_at, a.created_at))) as min,
  avg(timestampdiff(hour, b.created_at, a.created_at))) as average,
  max(timestampdiff(hour, b.created_at, a.created_at))) as max
from pull_request_history a, pull_request_history b, 
     projects p, pull_requests pr
where  p.id = pr.base_repo_id 
	and pr.id=a.pull_request_id
    and a.pull_request_id = b.pull_request_id 
    and a.action='opened' and b.action='merged' 
group by p.id
order by count desc;

# At the time a pull request was merged, what is the size of the team?
# Beware of pull request history duplicates!

#select pull_request_id, created_at, action, count(*) 
#from pull_request_history a
#group by pull_request_id, created_at, action,  ext_ref_id
#having count(*) >1;

select pr.user_id, p.name, pr.id, prh.created_at, count(pm.user_id) as teamsize, 
(select distinct(timestampdiff(minute,a.created_at, b.created_at))
from pull_request_history a, pull_request_history b 
where a.pull_request_id = b.pull_request_id and 
	a.action='opened' and b.action='merged' and b.pull_request_id = pr.id) as diff
from projects p, pull_requests pr, pull_request_history prh, project_members pm
where 
	prh.action = 'merged' and
	pm.created_at < prh.created_at and
	pr.id = prh.pull_request_id and
	p.id = pr.base_repo_id and
	pm.repo_id = pr.id  
group by
	pr.id
order by 
	diff desc
	limit 100;

# Commit % coming from pull requests

select u.login, p.name, a.total_commits, b.commits_from_pull_reqs, (100 * b.commits_from_pull_reqs)/a.total_commits as ratio
from
(select p.id as prid, count(c.id) as total_commits
	from commits c, projects p
	where p.id = c.project_id
	group by p.id) as a,
(select p.id as prid, count(prc.commit_id) as commits_from_pull_reqs
	from projects p, pull_requests pr, pull_request_commits prc
	where p.id = pr.base_repo_id
	and pr.id = prc.pull_request_id
	group by p.id) as b,
projects p, users u
where
  a.prid = b.prid
  and a.prid = p.id
  and u.id = p.owner_id
order by ratio desc

# Number of core team members vs commiters through pull requests

select u.login, p.name, a.num_project_members, b.num_pull_request_committers
from
(select repo_id as project_id, count(*) as num_project_members 
from project_members 
group by repo_id) as a, 
(select p.id as project_id, count(distinct u.login) as num_pull_request_committers
from users u, pull_requests pr, projects p, pull_request_commits prc, commits c
where
	pr.user_id = u.id and
	pr.base_repo_id = p.id and
	prc.pull_request_id = pr.id and
	c.id = prc.commit_id and
	c.author_id = u.id and
	u.id not in (select user_id from project_members where repo_id = p.id)
group by p.id
) as b, 
users u, projects p
where
	a.project_id = b.project_id and
	a.project_id = p.id and
	u.id = p.owner_id
group by 
	a.project_id
order by 
	b.num_pull_request_committers desc

# Pull request patch length (or commit number) vs time to merge. 
# Pull request patch length (or commit number) vs acceptance rate.
# Watches vs forks

# Forks vs pull requests


# Pull request acceptance rate/time by user fame

select a.user_id, a.num_followers, b.avgtime
from 
(select u.id as user_id, count(f.user_id) as num_followers
from followers f, users u 
where f.follower_id  = u.id
group by u.login) as a,
(select p.user_id as user_id, avg(timestampdiff(minute,a.created_at, b.created_at)) as avgtime
from pull_request_history a, pull_request_history b,
	 pull_requests p
where a.pull_request_id = b.pull_request_id 
and a.action='opened' and b.action='merged' 
and a.pull_request_id = p.id
and b.pull_request_id = p.id
group by p.user_id
) as b
where a.user_id = b.user_id

# Pull request acceptance rate/time for users known to the project



# Membership promotion: if pull request is accepted, user becomes member?

# Forks with more users than original project

# Most active/important/big projects

select a.login, a.name, a.num_commits, b.num_pull_requests, c.num_forks, d.num_watchers
from
(select u.login, p.name, count(*) as num_commits
from projects p, commits c, users u
where c.project_id = p.id
and u.id = p.owner_id
group by p.id
order by count(*) desc
limit 100) as a,
(select u.login, p.name, count(*) as num_pull_requests
from projects p, users u, pull_requests pr
where pr.base_repo_id = p.id
and u.id = p.owner_id
group by p.id
order by count(*) desc
limit 100) as b,
(select u.login, p.name, count(f.forked_from_id) as num_forks
from projects p, users u, forks f
where f.forked_from_id = p.id
and u.id = p.owner_id
group by p.id
order by count(f.forked_from_id) desc
limit 100) as c,
(select u.login, p.name, count(w.user_id) as num_watchers
from projects p, users u, watchers w
where w.repo_id = p.id
and u.id = p.owner_id
group by p.id
order by count(w.user_id) desc
limit 100) as d
where 
	a.login = b.login and a.name = b.name and
	a.login = c.login and a.name = c.name and
	a.login = d.login and a.name = d.name


# Rename commits.project_id to commits.owner_project_id

# Projects to look into
akka akka scala
scala scala scala
rails rails ruby
capistrano capistrano ruby
mojombo jekyll ruby
mongoid mongoid ruby
mitchellh vagrant ruby
intridea grape ruby
eventmachine eventmachine ruby
puppetlabs puppet ruby
joyent node javascript
jquery jquery javascript
mozilla pdf.js javascipt
django django python
facebook tornado
elasticsearch elasticsearch java
jenkinsci jenkins java
SpringSource spring-framework java
KentBeck junit java
netty netty java

# Select project with more than 100 pull requests which are not
# forks of other projects
select u.login, p.name #, p.id, count(*)
from projects p, users u, pull_requests pr
where p.owner_id = u.id 
and pr.base_repo_id = p.id
and p.language='Java'
and not exists (select * from forks where forked_project_id=p.id)
group by p.id
having count(*) > 100
order by count(*) desc

# Repos that are not forks

select u.login, p.name
from projects p
where not exists (select * from forks where forked_project_id=p.id)

# Project characteristics

select concat(u.login, '/', p.name) as owner,
(select count(*) from commits c, project_commits pc where pc.project_id = p.id and pc.commit_id = c.id) as commits,
(select count(*) from watchers where repo_id = p.id) as watchers,
(select count(*) from pull_requests where base_repo_id = p.id) as pull_requests,
(select count(*) from issues where repo_id = p.id) as issues,
(select count(*) from project_members where repo_id = p.id) as project_members,
(select count(distinct c.author_id) from commits c, project_commits pc where pc.project_id = p.id and pc.commit_id = c.id) as contributors,
p.language
from projects p, users u
where not exists (select forked_from_id from forks where forked_project_id = p.id)
and u.id = p.owner_id
group by p.id 
order by commits desc;
